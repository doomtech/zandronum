State 0:
          main ::= * translation_unit
     (12) translation_unit ::= *
          translation_unit ::= * translation_unit external_declaration

                          main accept
              translation_unit shift  1
                     {default} reduce 12

State 1:
      (0) main ::= translation_unit *
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          translation_unit ::= translation_unit * external_declaration
          external_declaration ::= * define_statement
          external_declaration ::= * include_statement
          external_declaration ::= * print_statement
          external_declaration ::= * enum_statement
          external_declaration ::= * linetype_declaration
          external_declaration ::= * boom_declaration
          external_declaration ::= * special_declaration
          external_declaration ::= * NOP
          print_statement ::= * PRINT LPAREN print_list RPAREN
          define_statement ::= * DEFINE SYM LPAREN exp RPAREN
          include_statement ::= * INCLUDE STRING
          enum_statement ::= * enum_open enum_list RBRACE
          enum_open ::= * ENUM LBRACE
          special_declaration ::= * SPECIAL special_list SEMICOLON
          linetype_declaration ::= * exp EQUALS exp COMMA exp LPAREN special_args RPAREN
          linetype_declaration ::= * exp EQUALS exp COMMA SYM LPAREN special_args RPAREN
          boom_declaration ::= * LBRACKET exp RBRACKET LPAREN exp COMMA exp RPAREN LBRACE boom_body RBRACE

                             $ reduce 0
                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           NOP shift  144
                         PRINT shift  115
                        DEFINE shift  104
                       INCLUDE shift  109
                          ENUM shift  120
                       SPECIAL shift  6
                      LBRACKET shift  53
                           exp shift  80
          external_declaration shift  154
              define_statement shift  150
             include_statement shift  164
               print_statement shift  149
                enum_statement shift  148
          linetype_declaration shift  147
              boom_declaration shift  146
           special_declaration shift  145
                     enum_open shift  16

State 2:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
     (23) print_list ::= *
          print_list ::= * print_item
          print_list ::= * print_item COMMA print_list
          print_list ::= print_item COMMA * print_list
          print_item ::= * STRING
          print_item ::= * exp
          print_item ::= * ENDL

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                        STRING shift  141
                          ENDL shift  138
                           exp shift  86
                    print_list shift  142
                    print_item shift  106
                     {default} reduce 23

State 3:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          print_statement ::= PRINT LPAREN * print_list RPAREN
     (23) print_list ::= *
          print_list ::= * print_item
          print_list ::= * print_item COMMA print_list
          print_item ::= * STRING
          print_item ::= * exp
          print_item ::= * ENDL

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                        STRING shift  141
                          ENDL shift  138
                           exp shift  86
                    print_list shift  108
                    print_item shift  106
                     {default} reduce 23

State 4:
          boom_declaration ::= LBRACKET exp RBRACKET LPAREN exp COMMA exp RPAREN LBRACE * boom_body RBRACE
     (49) boom_body ::= *
          boom_body ::= * boom_line boom_body
          boom_line ::= * boom_selector boom_op boom_args
          boom_selector ::= * FLAGS
          boom_selector ::= * ARG2
          boom_selector ::= * ARG3
          boom_selector ::= * ARG4
          boom_selector ::= * ARG5

                         FLAGS shift  169
                          ARG2 shift  170
                          ARG3 shift  171
                          ARG4 shift  172
                          ARG5 shift  173
                 boom_selector shift  56
                     boom_line shift  5
                     boom_body shift  124
                     {default} reduce 49

State 5:
     (49) boom_body ::= *
          boom_body ::= * boom_line boom_body
          boom_body ::= boom_line * boom_body
          boom_line ::= * boom_selector boom_op boom_args
          boom_selector ::= * FLAGS
          boom_selector ::= * ARG2
          boom_selector ::= * ARG3
          boom_selector ::= * ARG4
          boom_selector ::= * ARG5

                         FLAGS shift  169
                          ARG2 shift  170
                          ARG3 shift  171
                          ARG4 shift  172
                          ARG5 shift  173
                 boom_selector shift  56
                     boom_line shift  5
                     boom_body shift  153
                     {default} reduce 49

State 6:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_declaration ::= SPECIAL * special_list SEMICOLON
          special_list ::= * special_def
          special_list ::= * special_list COMMA special_def
          special_def ::= * exp COLON SYM LPAREN maybe_argcount RPAREN
          special_def ::= * exp COLON SYMNUM LPAREN maybe_argcount RPAREN

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  79
                  special_list shift  100
                   special_def shift  140

State 7:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          boom_args ::= exp LBRACKET * arg_list RBRACKET
          arg_list ::= * list_val
          arg_list ::= * list_val COMMA arg_list
          list_val ::= * exp COLON exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  64
                      list_val shift  128
                      arg_list shift  127

State 8:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          arg_list ::= * list_val
          arg_list ::= * list_val COMMA arg_list
          arg_list ::= list_val COMMA * arg_list
          list_val ::= * exp COLON exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  64
                      list_val shift  128
                      arg_list shift  165

State 9:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          linetype_declaration ::= exp EQUALS exp COMMA SYM LPAREN * special_args RPAREN
     (64) special_args ::= *
          special_args ::= * TAG
          special_args ::= * TAG COMMA exp
          special_args ::= * TAG COMMA exp COMMA exp
          special_args ::= * TAG COMMA exp COMMA exp COMMA exp
          special_args ::= * TAG COMMA exp COMMA exp COMMA exp COMMA exp
          special_args ::= * TAG COMMA TAG
          special_args ::= * TAG COMMA TAG COMMA exp
          special_args ::= * TAG COMMA TAG COMMA exp COMMA exp
          special_args ::= * TAG COMMA TAG COMMA exp COMMA exp COMMA exp
          special_args ::= * LINEID
          special_args ::= * LINEID COMMA exp
          special_args ::= * LINEID COMMA exp COMMA exp
          special_args ::= * LINEID COMMA exp COMMA exp COMMA exp
          special_args ::= * LINEID COMMA exp COMMA exp COMMA exp COMMA exp
          special_args ::= * exp
          special_args ::= * exp COMMA exp
          special_args ::= * exp COMMA exp COMMA exp
          special_args ::= * exp COMMA exp COMMA exp COMMA exp
          special_args ::= * exp COMMA exp COMMA exp COMMA exp COMMA exp
          special_args ::= * exp COMMA TAG
          special_args ::= * exp COMMA TAG COMMA exp
          special_args ::= * exp COMMA TAG COMMA exp COMMA exp
          special_args ::= * exp COMMA TAG COMMA exp COMMA exp COMMA exp
          special_args ::= * exp COMMA exp COMMA TAG
          special_args ::= * exp COMMA exp COMMA TAG COMMA exp
          special_args ::= * exp COMMA exp COMMA TAG COMMA exp COMMA exp
          special_args ::= * exp COMMA exp COMMA exp COMMA TAG
          special_args ::= * exp COMMA exp COMMA exp COMMA TAG COMMA exp
          special_args ::= * exp COMMA exp COMMA exp COMMA exp COMMA TAG

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           TAG shift  111
                        LINEID shift  119
                           exp shift  71
                  special_args shift  123
                     {default} reduce 64

State 10:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          linetype_declaration ::= exp EQUALS exp COMMA exp LPAREN * special_args RPAREN
     (64) special_args ::= *
          special_args ::= * TAG
          special_args ::= * TAG COMMA exp
          special_args ::= * TAG COMMA exp COMMA exp
          special_args ::= * TAG COMMA exp COMMA exp COMMA exp
          special_args ::= * TAG COMMA exp COMMA exp COMMA exp COMMA exp
          special_args ::= * TAG COMMA TAG
          special_args ::= * TAG COMMA TAG COMMA exp
          special_args ::= * TAG COMMA TAG COMMA exp COMMA exp
          special_args ::= * TAG COMMA TAG COMMA exp COMMA exp COMMA exp
          special_args ::= * LINEID
          special_args ::= * LINEID COMMA exp
          special_args ::= * LINEID COMMA exp COMMA exp
          special_args ::= * LINEID COMMA exp COMMA exp COMMA exp
          special_args ::= * LINEID COMMA exp COMMA exp COMMA exp COMMA exp
          special_args ::= * exp
          special_args ::= * exp COMMA exp
          special_args ::= * exp COMMA exp COMMA exp
          special_args ::= * exp COMMA exp COMMA exp COMMA exp
          special_args ::= * exp COMMA exp COMMA exp COMMA exp COMMA exp
          special_args ::= * exp COMMA TAG
          special_args ::= * exp COMMA TAG COMMA exp
          special_args ::= * exp COMMA TAG COMMA exp COMMA exp
          special_args ::= * exp COMMA TAG COMMA exp COMMA exp COMMA exp
          special_args ::= * exp COMMA exp COMMA TAG
          special_args ::= * exp COMMA exp COMMA TAG COMMA exp
          special_args ::= * exp COMMA exp COMMA TAG COMMA exp COMMA exp
          special_args ::= * exp COMMA exp COMMA exp COMMA TAG
          special_args ::= * exp COMMA exp COMMA exp COMMA TAG COMMA exp
          special_args ::= * exp COMMA exp COMMA exp COMMA exp COMMA TAG

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           TAG shift  111
                        LINEID shift  119
                           exp shift  71
                  special_args shift  102
                     {default} reduce 64

State 11:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          boom_line ::= boom_selector boom_op * boom_args
          boom_args ::= * exp
          boom_args ::= * exp LBRACKET arg_list RBRACKET

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  83
                     boom_args shift  166

State 12:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_list ::= special_list COMMA * special_def
          special_def ::= * exp COLON SYM LPAREN maybe_argcount RPAREN
          special_def ::= * exp COLON SYMNUM LPAREN maybe_argcount RPAREN

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  79
                   special_def shift  139

State 13:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_def ::= exp COLON SYMNUM LPAREN * maybe_argcount RPAREN
     (43) maybe_argcount ::= *
          maybe_argcount ::= * exp
          maybe_argcount ::= * exp COMMA exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  82
                maybe_argcount shift  110
                     {default} reduce 43

State 14:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_def ::= exp COLON SYM LPAREN * maybe_argcount RPAREN
     (43) maybe_argcount ::= *
          maybe_argcount ::= * exp
          maybe_argcount ::= * exp COMMA exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  82
                maybe_argcount shift  121
                     {default} reduce 43

State 15:
     (33) enum_list ::= *
          enum_list ::= * single_enum
          enum_list ::= * single_enum COMMA enum_list
          enum_list ::= single_enum COMMA * enum_list
          single_enum ::= * SYM
          single_enum ::= * SYM EQUALS exp

                           SYM shift  117
                     enum_list shift  132
                   single_enum shift  114
                     {default} reduce 33

State 16:
          enum_statement ::= enum_open * enum_list RBRACE
     (33) enum_list ::= *
          enum_list ::= * single_enum
          enum_list ::= * single_enum COMMA enum_list
          single_enum ::= * SYM
          single_enum ::= * SYM EQUALS exp

                           SYM shift  117
                     enum_list shift  112
                   single_enum shift  114
                     {default} reduce 33

State 17:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA exp COMMA * exp
          special_args ::= exp COMMA exp COMMA * exp COMMA exp
          special_args ::= exp COMMA exp COMMA * exp COMMA exp COMMA exp
          special_args ::= exp COMMA exp COMMA * TAG
          special_args ::= exp COMMA exp COMMA * TAG COMMA exp
          special_args ::= exp COMMA exp COMMA * TAG COMMA exp COMMA exp
          special_args ::= exp COMMA exp COMMA * exp COMMA TAG
          special_args ::= exp COMMA exp COMMA * exp COMMA TAG COMMA exp
          special_args ::= exp COMMA exp COMMA * exp COMMA exp COMMA TAG

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           TAG shift  129
                           exp shift  81

State 18:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA * exp
          special_args ::= exp COMMA * exp COMMA exp
          special_args ::= exp COMMA * exp COMMA exp COMMA exp
          special_args ::= exp COMMA * exp COMMA exp COMMA exp COMMA exp
          special_args ::= exp COMMA * TAG
          special_args ::= exp COMMA * TAG COMMA exp
          special_args ::= exp COMMA * TAG COMMA exp COMMA exp
          special_args ::= exp COMMA * TAG COMMA exp COMMA exp COMMA exp
          special_args ::= exp COMMA * exp COMMA TAG
          special_args ::= exp COMMA * exp COMMA TAG COMMA exp
          special_args ::= exp COMMA * exp COMMA TAG COMMA exp COMMA exp
          special_args ::= exp COMMA * exp COMMA exp COMMA TAG
          special_args ::= exp COMMA * exp COMMA exp COMMA TAG COMMA exp
          special_args ::= exp COMMA * exp COMMA exp COMMA exp COMMA TAG

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           TAG shift  103
                           exp shift  70

State 19:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA exp COMMA exp COMMA * exp
          special_args ::= exp COMMA exp COMMA exp COMMA * exp COMMA exp
          special_args ::= exp COMMA exp COMMA exp COMMA * TAG
          special_args ::= exp COMMA exp COMMA exp COMMA * TAG COMMA exp
          special_args ::= exp COMMA exp COMMA exp COMMA * exp COMMA TAG

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           TAG shift  113
                           exp shift  66

State 20:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA exp COMMA exp COMMA exp COMMA * exp
          special_args ::= exp COMMA exp COMMA exp COMMA exp COMMA * TAG

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           TAG shift  158
                           exp shift  89

State 21:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          linetype_declaration ::= exp EQUALS exp COMMA * exp LPAREN special_args RPAREN
          linetype_declaration ::= exp EQUALS exp COMMA * SYM LPAREN special_args RPAREN

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           SYM shift  126
                           exp shift  73

State 22:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= TAG COMMA * exp
          special_args ::= TAG COMMA * exp COMMA exp
          special_args ::= TAG COMMA * exp COMMA exp COMMA exp
          special_args ::= TAG COMMA * exp COMMA exp COMMA exp COMMA exp
          special_args ::= TAG COMMA * TAG
          special_args ::= TAG COMMA * TAG COMMA exp
          special_args ::= TAG COMMA * TAG COMMA exp COMMA exp
          special_args ::= TAG COMMA * TAG COMMA exp COMMA exp COMMA exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           TAG shift  118
                           exp shift  58

State 23:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          list_val ::= exp COLON * exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  92

State 24:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          linetype_declaration ::= exp EQUALS * exp COMMA exp LPAREN special_args RPAREN
          linetype_declaration ::= exp EQUALS * exp COMMA SYM LPAREN special_args RPAREN

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  75

State 25:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= LINEID COMMA exp COMMA * exp
          special_args ::= LINEID COMMA exp COMMA * exp COMMA exp
          special_args ::= LINEID COMMA exp COMMA * exp COMMA exp COMMA exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  76

State 26:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          exp ::= LPAREN * exp RPAREN

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  77

State 27:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= LINEID COMMA * exp
          special_args ::= LINEID COMMA * exp COMMA exp
          special_args ::= LINEID COMMA * exp COMMA exp COMMA exp
          special_args ::= LINEID COMMA * exp COMMA exp COMMA exp COMMA exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  74

State 28:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          single_enum ::= SYM EQUALS * exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  90

State 29:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          boom_declaration ::= LBRACKET exp RBRACKET LPAREN exp COMMA * exp RPAREN LBRACE boom_body RBRACE

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  72

State 30:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= MINUS * exp
          exp ::= * LPAREN exp RPAREN

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  160

State 31:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= TAG COMMA TAG COMMA exp COMMA exp COMMA * exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  91

State 32:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= exp PLUS * exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  99

State 33:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= TAG COMMA TAG COMMA exp COMMA * exp
          special_args ::= TAG COMMA TAG COMMA exp COMMA * exp COMMA exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  69

State 34:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= exp XOR * exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  96

State 35:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= TAG COMMA TAG COMMA * exp
          special_args ::= TAG COMMA TAG COMMA * exp COMMA exp
          special_args ::= TAG COMMA TAG COMMA * exp COMMA exp COMMA exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  67

State 36:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= LINEID COMMA exp COMMA exp COMMA exp COMMA * exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  88

State 37:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= exp AND * exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  97

State 38:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          boom_declaration ::= LBRACKET exp RBRACKET LPAREN * exp COMMA exp RPAREN LBRACE boom_body RBRACE

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  65

State 39:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= exp OR * exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  95

State 40:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA exp COMMA exp COMMA TAG COMMA * exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  87

State 41:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= exp DIVIDE * exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  161

State 42:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= TAG COMMA exp COMMA exp COMMA exp COMMA * exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  93

State 43:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA exp COMMA TAG COMMA * exp
          special_args ::= exp COMMA exp COMMA TAG COMMA * exp COMMA exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  61

State 44:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= TAG COMMA exp COMMA exp COMMA * exp
          special_args ::= TAG COMMA exp COMMA exp COMMA * exp COMMA exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  62

State 45:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA exp COMMA TAG COMMA exp COMMA * exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  85

State 46:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          define_statement ::= DEFINE SYM LPAREN * exp RPAREN

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  63

State 47:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          maybe_argcount ::= exp COMMA * exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  84

State 48:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA TAG COMMA * exp
          special_args ::= exp COMMA TAG COMMA * exp COMMA exp
          special_args ::= exp COMMA TAG COMMA * exp COMMA exp COMMA exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  59

State 49:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= TAG COMMA exp COMMA * exp
          special_args ::= TAG COMMA exp COMMA * exp COMMA exp
          special_args ::= TAG COMMA exp COMMA * exp COMMA exp COMMA exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  60

State 50:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA TAG COMMA exp COMMA * exp
          special_args ::= exp COMMA TAG COMMA exp COMMA * exp COMMA exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  57

State 51:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= LINEID COMMA exp COMMA exp COMMA * exp
          special_args ::= LINEID COMMA exp COMMA exp COMMA * exp COMMA exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  78

State 52:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA TAG COMMA exp COMMA exp COMMA * exp

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  94

State 53:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          boom_declaration ::= LBRACKET * exp RBRACKET LPAREN exp COMMA exp RPAREN LBRACE boom_body RBRACE

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  68

State 54:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= exp MINUS * exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  98

State 55:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= exp MULTIPLY * exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN

                         MINUS shift  30
                           NUM shift  157
                        SYMNUM shift  152
                        LPAREN shift  26
                           exp shift  163

State 56:
          boom_line ::= boom_selector * boom_op boom_args
          boom_op ::= * EQUALS
          boom_op ::= * OR_EQUAL

                        EQUALS shift  167
                      OR_EQUAL shift  168
                       boom_op shift  11

State 57:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (86) special_args ::= exp COMMA TAG COMMA exp COMMA exp *
          special_args ::= exp COMMA TAG COMMA exp COMMA exp * COMMA exp

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COMMA shift  52
                     {default} reduce 86

State 58:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (66) special_args ::= TAG COMMA exp *
          special_args ::= TAG COMMA exp * COMMA exp
          special_args ::= TAG COMMA exp * COMMA exp COMMA exp
          special_args ::= TAG COMMA exp * COMMA exp COMMA exp COMMA exp

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COMMA shift  49
                     {default} reduce 66

State 59:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (85) special_args ::= exp COMMA TAG COMMA exp *
          special_args ::= exp COMMA TAG COMMA exp * COMMA exp
          special_args ::= exp COMMA TAG COMMA exp * COMMA exp COMMA exp

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COMMA shift  50
                     {default} reduce 85

State 60:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (67) special_args ::= TAG COMMA exp COMMA exp *
          special_args ::= TAG COMMA exp COMMA exp * COMMA exp
          special_args ::= TAG COMMA exp COMMA exp * COMMA exp COMMA exp

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COMMA shift  44
                     {default} reduce 67

State 61:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (89) special_args ::= exp COMMA exp COMMA TAG COMMA exp *
          special_args ::= exp COMMA exp COMMA TAG COMMA exp * COMMA exp

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COMMA shift  45
                     {default} reduce 89

State 62:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (68) special_args ::= TAG COMMA exp COMMA exp COMMA exp *
          special_args ::= TAG COMMA exp COMMA exp COMMA exp * COMMA exp

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COMMA shift  42
                     {default} reduce 68

State 63:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          define_statement ::= DEFINE SYM LPAREN exp * RPAREN

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                        RPAREN shift  136

State 64:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          list_val ::= exp * COLON exp

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COLON shift  23

State 65:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          boom_declaration ::= LBRACKET exp RBRACKET LPAREN exp * COMMA exp RPAREN LBRACE boom_body RBRACE

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COMMA shift  29

State 66:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (82) special_args ::= exp COMMA exp COMMA exp COMMA exp *
          special_args ::= exp COMMA exp COMMA exp COMMA exp * COMMA exp
          special_args ::= exp COMMA exp COMMA exp COMMA exp * COMMA TAG

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COMMA shift  20
                     {default} reduce 82

State 67:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (71) special_args ::= TAG COMMA TAG COMMA exp *
          special_args ::= TAG COMMA TAG COMMA exp * COMMA exp
          special_args ::= TAG COMMA TAG COMMA exp * COMMA exp COMMA exp

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COMMA shift  33
                     {default} reduce 71

State 68:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          boom_declaration ::= LBRACKET exp * RBRACKET LPAREN exp COMMA exp RPAREN LBRACE boom_body RBRACE

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                      RBRACKET shift  107

State 69:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (72) special_args ::= TAG COMMA TAG COMMA exp COMMA exp *
          special_args ::= TAG COMMA TAG COMMA exp COMMA exp * COMMA exp

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COMMA shift  31
                     {default} reduce 72

State 70:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (80) special_args ::= exp COMMA exp *
          special_args ::= exp COMMA exp * COMMA exp
          special_args ::= exp COMMA exp * COMMA exp COMMA exp
          special_args ::= exp COMMA exp * COMMA exp COMMA exp COMMA exp
          special_args ::= exp COMMA exp * COMMA TAG
          special_args ::= exp COMMA exp * COMMA TAG COMMA exp
          special_args ::= exp COMMA exp * COMMA TAG COMMA exp COMMA exp
          special_args ::= exp COMMA exp * COMMA exp COMMA TAG
          special_args ::= exp COMMA exp * COMMA exp COMMA TAG COMMA exp
          special_args ::= exp COMMA exp * COMMA exp COMMA exp COMMA TAG

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COMMA shift  17
                     {default} reduce 80

State 71:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (79) special_args ::= exp *
          special_args ::= exp * COMMA exp
          special_args ::= exp * COMMA exp COMMA exp
          special_args ::= exp * COMMA exp COMMA exp COMMA exp
          special_args ::= exp * COMMA exp COMMA exp COMMA exp COMMA exp
          special_args ::= exp * COMMA TAG
          special_args ::= exp * COMMA TAG COMMA exp
          special_args ::= exp * COMMA TAG COMMA exp COMMA exp
          special_args ::= exp * COMMA TAG COMMA exp COMMA exp COMMA exp
          special_args ::= exp * COMMA exp COMMA TAG
          special_args ::= exp * COMMA exp COMMA TAG COMMA exp
          special_args ::= exp * COMMA exp COMMA TAG COMMA exp COMMA exp
          special_args ::= exp * COMMA exp COMMA exp COMMA TAG
          special_args ::= exp * COMMA exp COMMA exp COMMA TAG COMMA exp
          special_args ::= exp * COMMA exp COMMA exp COMMA exp COMMA TAG

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COMMA shift  18
                     {default} reduce 79

State 72:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          boom_declaration ::= LBRACKET exp RBRACKET LPAREN exp COMMA exp * RPAREN LBRACE boom_body RBRACE

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                        RPAREN shift  122

State 73:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          linetype_declaration ::= exp EQUALS exp COMMA exp * LPAREN special_args RPAREN

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                        LPAREN shift  10

State 74:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (75) special_args ::= LINEID COMMA exp *
          special_args ::= LINEID COMMA exp * COMMA exp
          special_args ::= LINEID COMMA exp * COMMA exp COMMA exp
          special_args ::= LINEID COMMA exp * COMMA exp COMMA exp COMMA exp

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COMMA shift  25
                     {default} reduce 75

State 75:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          linetype_declaration ::= exp EQUALS exp * COMMA exp LPAREN special_args RPAREN
          linetype_declaration ::= exp EQUALS exp * COMMA SYM LPAREN special_args RPAREN

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COMMA shift  21

State 76:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (76) special_args ::= LINEID COMMA exp COMMA exp *
          special_args ::= LINEID COMMA exp COMMA exp * COMMA exp
          special_args ::= LINEID COMMA exp COMMA exp * COMMA exp COMMA exp

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COMMA shift  51
                     {default} reduce 76

State 77:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          exp ::= LPAREN exp * RPAREN

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                        RPAREN shift  159

State 78:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (77) special_args ::= LINEID COMMA exp COMMA exp COMMA exp *
          special_args ::= LINEID COMMA exp COMMA exp COMMA exp * COMMA exp

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COMMA shift  36
                     {default} reduce 77

State 79:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          special_def ::= exp * COLON SYM LPAREN maybe_argcount RPAREN
          special_def ::= exp * COLON SYMNUM LPAREN maybe_argcount RPAREN

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COLON shift  101

State 80:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          linetype_declaration ::= exp * EQUALS exp COMMA exp LPAREN special_args RPAREN
          linetype_declaration ::= exp * EQUALS exp COMMA SYM LPAREN special_args RPAREN

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                        EQUALS shift  24

State 81:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (81) special_args ::= exp COMMA exp COMMA exp *
          special_args ::= exp COMMA exp COMMA exp * COMMA exp
          special_args ::= exp COMMA exp COMMA exp * COMMA exp COMMA exp
          special_args ::= exp COMMA exp COMMA exp * COMMA TAG
          special_args ::= exp COMMA exp COMMA exp * COMMA TAG COMMA exp
          special_args ::= exp COMMA exp COMMA exp * COMMA exp COMMA TAG

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COMMA shift  19
                     {default} reduce 81

State 82:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (44) maybe_argcount ::= exp *
          maybe_argcount ::= exp * COMMA exp

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                         COMMA shift  47
                     {default} reduce 44

State 83:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (59) boom_args ::= exp *
          boom_args ::= exp * LBRACKET arg_list RBRACKET

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                      LBRACKET shift  7
                     {default} reduce 59

State 84:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (45) maybe_argcount ::= exp COMMA exp *

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                     {default} reduce 45

State 85:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (90) special_args ::= exp COMMA exp COMMA TAG COMMA exp COMMA exp *

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                     {default} reduce 90

State 86:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (27) print_item ::= exp *

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                     {default} reduce 27

State 87:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (92) special_args ::= exp COMMA exp COMMA exp COMMA TAG COMMA exp *

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                     {default} reduce 92

State 88:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (78) special_args ::= LINEID COMMA exp COMMA exp COMMA exp COMMA exp *

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                     {default} reduce 78

State 89:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (83) special_args ::= exp COMMA exp COMMA exp COMMA exp COMMA exp *

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                     {default} reduce 83

State 90:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (37) single_enum ::= SYM EQUALS exp *

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                     {default} reduce 37

State 91:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (73) special_args ::= TAG COMMA TAG COMMA exp COMMA exp COMMA exp *

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                     {default} reduce 73

State 92:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (63) list_val ::= exp COLON exp *

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                     {default} reduce 63

State 93:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (69) special_args ::= TAG COMMA exp COMMA exp COMMA exp COMMA exp *

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                     {default} reduce 69

State 94:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (87) special_args ::= exp COMMA TAG COMMA exp COMMA exp COMMA exp *

                            OR shift  39
                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                     {default} reduce 87

State 95:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
      (7) exp ::= exp OR exp *
          exp ::= exp * AND exp
          exp ::= exp * XOR exp

                           XOR shift  34
                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                     {default} reduce 7

State 96:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
      (9) exp ::= exp XOR exp *

                           AND shift  37
                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                     {default} reduce 9

State 97:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
      (8) exp ::= exp AND exp *
          exp ::= exp * XOR exp

                         MINUS shift  54
                          PLUS shift  32
                      MULTIPLY shift  55
                        DIVIDE shift  41
                     {default} reduce 8

State 98:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
      (4) exp ::= exp MINUS exp *
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp

                      MULTIPLY shift  55
                        DIVIDE shift  41
                     {default} reduce 4

State 99:
          exp ::= exp * PLUS exp
      (3) exp ::= exp PLUS exp *
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp

                      MULTIPLY shift  55
                        DIVIDE shift  41
                     {default} reduce 3

State 100:
          special_declaration ::= SPECIAL special_list * SEMICOLON
          special_list ::= special_list * COMMA special_def

                         COMMA shift  12
                     SEMICOLON shift  137

State 101:
          special_def ::= exp COLON * SYM LPAREN maybe_argcount RPAREN
          special_def ::= exp COLON * SYMNUM LPAREN maybe_argcount RPAREN

                        SYMNUM shift  116
                           SYM shift  125

State 102:
          linetype_declaration ::= exp EQUALS exp COMMA exp LPAREN special_args * RPAREN

                        RPAREN shift  156

State 103:
     (84) special_args ::= exp COMMA TAG *
          special_args ::= exp COMMA TAG * COMMA exp
          special_args ::= exp COMMA TAG * COMMA exp COMMA exp
          special_args ::= exp COMMA TAG * COMMA exp COMMA exp COMMA exp

                         COMMA shift  48
                     {default} reduce 84

State 104:
          define_statement ::= DEFINE * SYM LPAREN exp RPAREN

                           SYM shift  105

State 105:
          define_statement ::= DEFINE SYM * LPAREN exp RPAREN

                        LPAREN shift  46

State 106:
     (24) print_list ::= print_item *
          print_list ::= print_item * COMMA print_list

                         COMMA shift  2
                     {default} reduce 24

State 107:
          boom_declaration ::= LBRACKET exp RBRACKET * LPAREN exp COMMA exp RPAREN LBRACE boom_body RBRACE

                        LPAREN shift  38

State 108:
          print_statement ::= PRINT LPAREN print_list * RPAREN

                        RPAREN shift  143

State 109:
          include_statement ::= INCLUDE * STRING

                        STRING shift  134

State 110:
          special_def ::= exp COLON SYMNUM LPAREN maybe_argcount * RPAREN

                        RPAREN shift  135

State 111:
     (65) special_args ::= TAG *
          special_args ::= TAG * COMMA exp
          special_args ::= TAG * COMMA exp COMMA exp
          special_args ::= TAG * COMMA exp COMMA exp COMMA exp
          special_args ::= TAG * COMMA exp COMMA exp COMMA exp COMMA exp
          special_args ::= TAG * COMMA TAG
          special_args ::= TAG * COMMA TAG COMMA exp
          special_args ::= TAG * COMMA TAG COMMA exp COMMA exp
          special_args ::= TAG * COMMA TAG COMMA exp COMMA exp COMMA exp

                         COMMA shift  22
                     {default} reduce 65

State 112:
          enum_statement ::= enum_open enum_list * RBRACE

                        RBRACE shift  133

State 113:
     (91) special_args ::= exp COMMA exp COMMA exp COMMA TAG *
          special_args ::= exp COMMA exp COMMA exp COMMA TAG * COMMA exp

                         COMMA shift  40
                     {default} reduce 91

State 114:
     (34) enum_list ::= single_enum *
          enum_list ::= single_enum * COMMA enum_list

                         COMMA shift  15
                     {default} reduce 34

State 115:
          print_statement ::= PRINT * LPAREN print_list RPAREN

                        LPAREN shift  3

State 116:
          special_def ::= exp COLON SYMNUM * LPAREN maybe_argcount RPAREN

                        LPAREN shift  13

State 117:
     (36) single_enum ::= SYM *
          single_enum ::= SYM * EQUALS exp

                        EQUALS shift  28
                     {default} reduce 36

State 118:
     (70) special_args ::= TAG COMMA TAG *
          special_args ::= TAG COMMA TAG * COMMA exp
          special_args ::= TAG COMMA TAG * COMMA exp COMMA exp
          special_args ::= TAG COMMA TAG * COMMA exp COMMA exp COMMA exp

                         COMMA shift  35
                     {default} reduce 70

State 119:
     (74) special_args ::= LINEID *
          special_args ::= LINEID * COMMA exp
          special_args ::= LINEID * COMMA exp COMMA exp
          special_args ::= LINEID * COMMA exp COMMA exp COMMA exp
          special_args ::= LINEID * COMMA exp COMMA exp COMMA exp COMMA exp

                         COMMA shift  27
                     {default} reduce 74

State 120:
          enum_open ::= ENUM * LBRACE

                        LBRACE shift  130

State 121:
          special_def ::= exp COLON SYM LPAREN maybe_argcount * RPAREN

                        RPAREN shift  131

State 122:
          boom_declaration ::= LBRACKET exp RBRACKET LPAREN exp COMMA exp RPAREN * LBRACE boom_body RBRACE

                        LBRACE shift  4

State 123:
          linetype_declaration ::= exp EQUALS exp COMMA SYM LPAREN special_args * RPAREN

                        RPAREN shift  155

State 124:
          boom_declaration ::= LBRACKET exp RBRACKET LPAREN exp COMMA exp RPAREN LBRACE boom_body * RBRACE

                        RBRACE shift  151

State 125:
          special_def ::= exp COLON SYM * LPAREN maybe_argcount RPAREN

                        LPAREN shift  14

State 126:
          linetype_declaration ::= exp EQUALS exp COMMA SYM * LPAREN special_args RPAREN

                        LPAREN shift  9

State 127:
          boom_args ::= exp LBRACKET arg_list * RBRACKET

                      RBRACKET shift  162

State 128:
     (61) arg_list ::= list_val *
          arg_list ::= list_val * COMMA arg_list

                         COMMA shift  8
                     {default} reduce 61

State 129:
     (88) special_args ::= exp COMMA exp COMMA TAG *
          special_args ::= exp COMMA exp COMMA TAG * COMMA exp
          special_args ::= exp COMMA exp COMMA TAG * COMMA exp COMMA exp

                         COMMA shift  43
                     {default} reduce 88

State 130:
     (32) enum_open ::= ENUM LBRACE *

                     {default} reduce 32

State 131:
     (41) special_def ::= exp COLON SYM LPAREN maybe_argcount RPAREN *

                     {default} reduce 41

State 132:
     (35) enum_list ::= single_enum COMMA enum_list *

                     {default} reduce 35

State 133:
     (31) enum_statement ::= enum_open enum_list RBRACE *

                     {default} reduce 31

State 134:
     (30) include_statement ::= INCLUDE STRING *

                     {default} reduce 30

State 135:
     (42) special_def ::= exp COLON SYMNUM LPAREN maybe_argcount RPAREN *

                     {default} reduce 42

State 136:
     (29) define_statement ::= DEFINE SYM LPAREN exp RPAREN *

                     {default} reduce 29

State 137:
     (38) special_declaration ::= SPECIAL special_list SEMICOLON *

                     {default} reduce 38

State 138:
     (28) print_item ::= ENDL *

                     {default} reduce 28

State 139:
     (40) special_list ::= special_list COMMA special_def *

                     {default} reduce 40

State 140:
     (39) special_list ::= special_def *

                     {default} reduce 39

State 141:
     (26) print_item ::= STRING *

                     {default} reduce 26

State 142:
     (25) print_list ::= print_item COMMA print_list *

                     {default} reduce 25

State 143:
     (22) print_statement ::= PRINT LPAREN print_list RPAREN *

                     {default} reduce 22

State 144:
     (21) external_declaration ::= NOP *

                     {default} reduce 21

State 145:
     (20) external_declaration ::= special_declaration *

                     {default} reduce 20

State 146:
     (19) external_declaration ::= boom_declaration *

                     {default} reduce 19

State 147:
     (18) external_declaration ::= linetype_declaration *

                     {default} reduce 18

State 148:
     (17) external_declaration ::= enum_statement *

                     {default} reduce 17

State 149:
     (16) external_declaration ::= print_statement *

                     {default} reduce 16

State 150:
     (14) external_declaration ::= define_statement *

                     {default} reduce 14

State 151:
     (48) boom_declaration ::= LBRACKET exp RBRACKET LPAREN exp COMMA exp RPAREN LBRACE boom_body RBRACE *

                     {default} reduce 48

State 152:
      (2) exp ::= SYMNUM *

                     {default} reduce 2

State 153:
     (50) boom_body ::= boom_line boom_body *

                     {default} reduce 50

State 154:
     (13) translation_unit ::= translation_unit external_declaration *

                     {default} reduce 13

State 155:
     (47) linetype_declaration ::= exp EQUALS exp COMMA SYM LPAREN special_args RPAREN *

                     {default} reduce 47

State 156:
     (46) linetype_declaration ::= exp EQUALS exp COMMA exp LPAREN special_args RPAREN *

                     {default} reduce 46

State 157:
      (1) exp ::= NUM *

                     {default} reduce 1

State 158:
     (93) special_args ::= exp COMMA exp COMMA exp COMMA exp COMMA TAG *

                     {default} reduce 93

State 159:
     (11) exp ::= LPAREN exp RPAREN *

                     {default} reduce 11

State 160:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (10) exp ::= MINUS exp *

                     {default} reduce 10

State 161:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
      (6) exp ::= exp DIVIDE exp *
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp

                     {default} reduce 6

State 162:
     (60) boom_args ::= exp LBRACKET arg_list RBRACKET *

                     {default} reduce 60

State 163:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
      (5) exp ::= exp MULTIPLY exp *
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp

                     {default} reduce 5

State 164:
     (15) external_declaration ::= include_statement *

                     {default} reduce 15

State 165:
     (62) arg_list ::= list_val COMMA arg_list *

                     {default} reduce 62

State 166:
     (51) boom_line ::= boom_selector boom_op boom_args *

                     {default} reduce 51

State 167:
     (57) boom_op ::= EQUALS *

                     {default} reduce 57

State 168:
     (58) boom_op ::= OR_EQUAL *

                     {default} reduce 58

State 169:
     (52) boom_selector ::= FLAGS *

                     {default} reduce 52

State 170:
     (53) boom_selector ::= ARG2 *

                     {default} reduce 53

State 171:
     (54) boom_selector ::= ARG3 *

                     {default} reduce 54

State 172:
     (55) boom_selector ::= ARG4 *

                     {default} reduce 55

State 173:
     (56) boom_selector ::= ARG5 *

                     {default} reduce 56

----------------------------------------------------
Symbols:
    0: $:
    1: OR
    2: XOR
    3: AND
    4: MINUS
    5: PLUS
    6: MULTIPLY
    7: DIVIDE
    8: NEG
    9: NUM
   10: SYMNUM
   11: LPAREN
   12: RPAREN
   13: NOP
   14: PRINT
   15: COMMA
   16: STRING
   17: ENDL
   18: DEFINE
   19: SYM
   20: INCLUDE
   21: RBRACE
   22: ENUM
   23: LBRACE
   24: EQUALS
   25: SPECIAL
   26: SEMICOLON
   27: COLON
   28: LBRACKET
   29: RBRACKET
   30: FLAGS
   31: ARG2
   32: ARG3
   33: ARG4
   34: ARG5
   35: OR_EQUAL
   36: TAG
   37: LINEID
   38: error:
   39: exp: MINUS NUM SYMNUM LPAREN
   40: special_args: <lambda> MINUS NUM SYMNUM LPAREN TAG LINEID
   41: list_val: MINUS NUM SYMNUM LPAREN
   42: arg_list: MINUS NUM SYMNUM LPAREN
   43: boom_args: MINUS NUM SYMNUM LPAREN
   44: boom_op: EQUALS OR_EQUAL
   45: boom_selector: FLAGS ARG2 ARG3 ARG4 ARG5
   46: boom_line: FLAGS ARG2 ARG3 ARG4 ARG5
   47: boom_body: <lambda> FLAGS ARG2 ARG3 ARG4 ARG5
   48: maybe_argcount: <lambda> MINUS NUM SYMNUM LPAREN
   49: main: MINUS NUM SYMNUM LPAREN NOP PRINT DEFINE INCLUDE ENUM SPECIAL LBRACKET
   50: translation_unit: <lambda> MINUS NUM SYMNUM LPAREN NOP PRINT DEFINE INCLUDE ENUM SPECIAL LBRACKET
   51: external_declaration: MINUS NUM SYMNUM LPAREN NOP PRINT DEFINE INCLUDE ENUM SPECIAL LBRACKET
   52: define_statement: DEFINE
   53: include_statement: INCLUDE
   54: print_statement: PRINT
   55: enum_statement: ENUM
   56: linetype_declaration: MINUS NUM SYMNUM LPAREN
   57: boom_declaration: LBRACKET
   58: special_declaration: SPECIAL
   59: print_list: <lambda> MINUS NUM SYMNUM LPAREN STRING ENDL
   60: print_item: MINUS NUM SYMNUM LPAREN STRING ENDL
   61: enum_open: ENUM
   62: enum_list: <lambda> SYM
   63: single_enum: SYM
   64: special_list: MINUS NUM SYMNUM LPAREN
   65: special_def: MINUS NUM SYMNUM LPAREN
